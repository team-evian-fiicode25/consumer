// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package services

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
)

// CreateLoginNewLoginIQueryableLogin includes the requested fields of the GraphQL interface IQueryableLogin.
//
// CreateLoginNewLoginIQueryableLogin is implemented by the following types:
// CreateLoginNewLoginQueryableLogin
type CreateLoginNewLoginIQueryableLogin interface {
	implementsGraphQLInterfaceCreateLoginNewLoginIQueryableLogin()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetId returns the interface-field "id" from its implementation.
	GetId() string
	// GetUsername returns the interface-field "username" from its implementation.
	GetUsername() string
}

func (v *CreateLoginNewLoginQueryableLogin) implementsGraphQLInterfaceCreateLoginNewLoginIQueryableLogin() {
}

func __unmarshalCreateLoginNewLoginIQueryableLogin(b []byte, v *CreateLoginNewLoginIQueryableLogin) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "QueryableLogin":
		*v = new(CreateLoginNewLoginQueryableLogin)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing IQueryableLogin.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for CreateLoginNewLoginIQueryableLogin: "%v"`, tn.TypeName)
	}
}

func __marshalCreateLoginNewLoginIQueryableLogin(v *CreateLoginNewLoginIQueryableLogin) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *CreateLoginNewLoginQueryableLogin:
		typename = "QueryableLogin"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateLoginNewLoginQueryableLogin
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for CreateLoginNewLoginIQueryableLogin: "%T"`, v)
	}
}

// CreateLoginNewLoginQueryableLogin includes the requested fields of the GraphQL type QueryableLogin.
type CreateLoginNewLoginQueryableLogin struct {
	Typename string `json:"__typename"`
	Id       string `json:"id"`
	Username string `json:"username"`
}

// GetTypename returns CreateLoginNewLoginQueryableLogin.Typename, and is useful for accessing the field via an interface.
func (v *CreateLoginNewLoginQueryableLogin) GetTypename() string { return v.Typename }

// GetId returns CreateLoginNewLoginQueryableLogin.Id, and is useful for accessing the field via an interface.
func (v *CreateLoginNewLoginQueryableLogin) GetId() string { return v.Id }

// GetUsername returns CreateLoginNewLoginQueryableLogin.Username, and is useful for accessing the field via an interface.
func (v *CreateLoginNewLoginQueryableLogin) GetUsername() string { return v.Username }

// CreateLoginResponse is returned by CreateLogin on success.
type CreateLoginResponse struct {
	NewLogin CreateLoginNewLoginIQueryableLogin `json:"-"`
}

// GetNewLogin returns CreateLoginResponse.NewLogin, and is useful for accessing the field via an interface.
func (v *CreateLoginResponse) GetNewLogin() CreateLoginNewLoginIQueryableLogin { return v.NewLogin }

func (v *CreateLoginResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateLoginResponse
		NewLogin json.RawMessage `json:"newLogin"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateLoginResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.NewLogin
		src := firstPass.NewLogin
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalCreateLoginNewLoginIQueryableLogin(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal CreateLoginResponse.NewLogin: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCreateLoginResponse struct {
	NewLogin json.RawMessage `json:"newLogin"`
}

func (v *CreateLoginResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateLoginResponse) __premarshalJSON() (*__premarshalCreateLoginResponse, error) {
	var retval __premarshalCreateLoginResponse

	{

		dst := &retval.NewLogin
		src := v.NewLogin
		var err error
		*dst, err = __marshalCreateLoginNewLoginIQueryableLogin(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateLoginResponse.NewLogin: %w", err)
		}
	}
	return &retval, nil
}

// GetAllLoginsLoginsIQueryableLogin includes the requested fields of the GraphQL interface IQueryableLogin.
//
// GetAllLoginsLoginsIQueryableLogin is implemented by the following types:
// GetAllLoginsLoginsQueryableLogin
type GetAllLoginsLoginsIQueryableLogin interface {
	implementsGraphQLInterfaceGetAllLoginsLoginsIQueryableLogin()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetId returns the interface-field "id" from its implementation.
	GetId() string
	// GetUsername returns the interface-field "username" from its implementation.
	GetUsername() string
	// GetCreatedAt returns the interface-field "createdAt" from its implementation.
	GetCreatedAt() string
	// GetUpdatedAt returns the interface-field "updatedAt" from its implementation.
	GetUpdatedAt() string
	// GetEmail returns the interface-field "email" from its implementation.
	GetEmail() GetAllLoginsLoginsIQueryableLoginEmailIQueryableEmail
	// GetPhoneNumber returns the interface-field "phoneNumber" from its implementation.
	GetPhoneNumber() GetAllLoginsLoginsIQueryableLoginPhoneNumberIQueryablePhoneNumber
}

func (v *GetAllLoginsLoginsQueryableLogin) implementsGraphQLInterfaceGetAllLoginsLoginsIQueryableLogin() {
}

func __unmarshalGetAllLoginsLoginsIQueryableLogin(b []byte, v *GetAllLoginsLoginsIQueryableLogin) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "QueryableLogin":
		*v = new(GetAllLoginsLoginsQueryableLogin)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing IQueryableLogin.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetAllLoginsLoginsIQueryableLogin: "%v"`, tn.TypeName)
	}
}

func __marshalGetAllLoginsLoginsIQueryableLogin(v *GetAllLoginsLoginsIQueryableLogin) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetAllLoginsLoginsQueryableLogin:
		typename = "QueryableLogin"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetAllLoginsLoginsQueryableLogin
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetAllLoginsLoginsIQueryableLogin: "%T"`, v)
	}
}

// GetAllLoginsLoginsIQueryableLoginEmailIQueryableEmail includes the requested fields of the GraphQL interface IQueryableEmail.
//
// GetAllLoginsLoginsIQueryableLoginEmailIQueryableEmail is implemented by the following types:
// GetAllLoginsLoginsIQueryableLoginEmailQueryableEmail
type GetAllLoginsLoginsIQueryableLoginEmailIQueryableEmail interface {
	implementsGraphQLInterfaceGetAllLoginsLoginsIQueryableLoginEmailIQueryableEmail()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetAddress returns the interface-field "address" from its implementation.
	GetAddress() string
	// GetIsVerified returns the interface-field "isVerified" from its implementation.
	GetIsVerified() bool
}

func (v *GetAllLoginsLoginsIQueryableLoginEmailQueryableEmail) implementsGraphQLInterfaceGetAllLoginsLoginsIQueryableLoginEmailIQueryableEmail() {
}

func __unmarshalGetAllLoginsLoginsIQueryableLoginEmailIQueryableEmail(b []byte, v *GetAllLoginsLoginsIQueryableLoginEmailIQueryableEmail) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "QueryableEmail":
		*v = new(GetAllLoginsLoginsIQueryableLoginEmailQueryableEmail)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing IQueryableEmail.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetAllLoginsLoginsIQueryableLoginEmailIQueryableEmail: "%v"`, tn.TypeName)
	}
}

func __marshalGetAllLoginsLoginsIQueryableLoginEmailIQueryableEmail(v *GetAllLoginsLoginsIQueryableLoginEmailIQueryableEmail) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetAllLoginsLoginsIQueryableLoginEmailQueryableEmail:
		typename = "QueryableEmail"

		result := struct {
			TypeName string `json:"__typename"`
			*GetAllLoginsLoginsIQueryableLoginEmailQueryableEmail
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetAllLoginsLoginsIQueryableLoginEmailIQueryableEmail: "%T"`, v)
	}
}

// GetAllLoginsLoginsIQueryableLoginEmailQueryableEmail includes the requested fields of the GraphQL type QueryableEmail.
type GetAllLoginsLoginsIQueryableLoginEmailQueryableEmail struct {
	Typename   string `json:"__typename"`
	Address    string `json:"address"`
	IsVerified bool   `json:"isVerified"`
}

// GetTypename returns GetAllLoginsLoginsIQueryableLoginEmailQueryableEmail.Typename, and is useful for accessing the field via an interface.
func (v *GetAllLoginsLoginsIQueryableLoginEmailQueryableEmail) GetTypename() string {
	return v.Typename
}

// GetAddress returns GetAllLoginsLoginsIQueryableLoginEmailQueryableEmail.Address, and is useful for accessing the field via an interface.
func (v *GetAllLoginsLoginsIQueryableLoginEmailQueryableEmail) GetAddress() string { return v.Address }

// GetIsVerified returns GetAllLoginsLoginsIQueryableLoginEmailQueryableEmail.IsVerified, and is useful for accessing the field via an interface.
func (v *GetAllLoginsLoginsIQueryableLoginEmailQueryableEmail) GetIsVerified() bool {
	return v.IsVerified
}

// GetAllLoginsLoginsIQueryableLoginPhoneNumberIQueryablePhoneNumber includes the requested fields of the GraphQL interface IQueryablePhoneNumber.
//
// GetAllLoginsLoginsIQueryableLoginPhoneNumberIQueryablePhoneNumber is implemented by the following types:
// GetAllLoginsLoginsIQueryableLoginPhoneNumberQueryablePhoneNumber
type GetAllLoginsLoginsIQueryableLoginPhoneNumberIQueryablePhoneNumber interface {
	implementsGraphQLInterfaceGetAllLoginsLoginsIQueryableLoginPhoneNumberIQueryablePhoneNumber()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetNumber returns the interface-field "number" from its implementation.
	GetNumber() string
	// GetIsVerified returns the interface-field "isVerified" from its implementation.
	GetIsVerified() bool
}

func (v *GetAllLoginsLoginsIQueryableLoginPhoneNumberQueryablePhoneNumber) implementsGraphQLInterfaceGetAllLoginsLoginsIQueryableLoginPhoneNumberIQueryablePhoneNumber() {
}

func __unmarshalGetAllLoginsLoginsIQueryableLoginPhoneNumberIQueryablePhoneNumber(b []byte, v *GetAllLoginsLoginsIQueryableLoginPhoneNumberIQueryablePhoneNumber) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "QueryablePhoneNumber":
		*v = new(GetAllLoginsLoginsIQueryableLoginPhoneNumberQueryablePhoneNumber)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing IQueryablePhoneNumber.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetAllLoginsLoginsIQueryableLoginPhoneNumberIQueryablePhoneNumber: "%v"`, tn.TypeName)
	}
}

func __marshalGetAllLoginsLoginsIQueryableLoginPhoneNumberIQueryablePhoneNumber(v *GetAllLoginsLoginsIQueryableLoginPhoneNumberIQueryablePhoneNumber) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetAllLoginsLoginsIQueryableLoginPhoneNumberQueryablePhoneNumber:
		typename = "QueryablePhoneNumber"

		result := struct {
			TypeName string `json:"__typename"`
			*GetAllLoginsLoginsIQueryableLoginPhoneNumberQueryablePhoneNumber
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetAllLoginsLoginsIQueryableLoginPhoneNumberIQueryablePhoneNumber: "%T"`, v)
	}
}

// GetAllLoginsLoginsIQueryableLoginPhoneNumberQueryablePhoneNumber includes the requested fields of the GraphQL type QueryablePhoneNumber.
type GetAllLoginsLoginsIQueryableLoginPhoneNumberQueryablePhoneNumber struct {
	Typename   string `json:"__typename"`
	Number     string `json:"number"`
	IsVerified bool   `json:"isVerified"`
}

// GetTypename returns GetAllLoginsLoginsIQueryableLoginPhoneNumberQueryablePhoneNumber.Typename, and is useful for accessing the field via an interface.
func (v *GetAllLoginsLoginsIQueryableLoginPhoneNumberQueryablePhoneNumber) GetTypename() string {
	return v.Typename
}

// GetNumber returns GetAllLoginsLoginsIQueryableLoginPhoneNumberQueryablePhoneNumber.Number, and is useful for accessing the field via an interface.
func (v *GetAllLoginsLoginsIQueryableLoginPhoneNumberQueryablePhoneNumber) GetNumber() string {
	return v.Number
}

// GetIsVerified returns GetAllLoginsLoginsIQueryableLoginPhoneNumberQueryablePhoneNumber.IsVerified, and is useful for accessing the field via an interface.
func (v *GetAllLoginsLoginsIQueryableLoginPhoneNumberQueryablePhoneNumber) GetIsVerified() bool {
	return v.IsVerified
}

// GetAllLoginsLoginsQueryableLogin includes the requested fields of the GraphQL type QueryableLogin.
type GetAllLoginsLoginsQueryableLogin struct {
	Typename    string                                                            `json:"__typename"`
	Id          string                                                            `json:"id"`
	Username    string                                                            `json:"username"`
	CreatedAt   string                                                            `json:"createdAt"`
	UpdatedAt   string                                                            `json:"updatedAt"`
	Email       GetAllLoginsLoginsIQueryableLoginEmailIQueryableEmail             `json:"-"`
	PhoneNumber GetAllLoginsLoginsIQueryableLoginPhoneNumberIQueryablePhoneNumber `json:"-"`
}

// GetTypename returns GetAllLoginsLoginsQueryableLogin.Typename, and is useful for accessing the field via an interface.
func (v *GetAllLoginsLoginsQueryableLogin) GetTypename() string { return v.Typename }

// GetId returns GetAllLoginsLoginsQueryableLogin.Id, and is useful for accessing the field via an interface.
func (v *GetAllLoginsLoginsQueryableLogin) GetId() string { return v.Id }

// GetUsername returns GetAllLoginsLoginsQueryableLogin.Username, and is useful for accessing the field via an interface.
func (v *GetAllLoginsLoginsQueryableLogin) GetUsername() string { return v.Username }

// GetCreatedAt returns GetAllLoginsLoginsQueryableLogin.CreatedAt, and is useful for accessing the field via an interface.
func (v *GetAllLoginsLoginsQueryableLogin) GetCreatedAt() string { return v.CreatedAt }

// GetUpdatedAt returns GetAllLoginsLoginsQueryableLogin.UpdatedAt, and is useful for accessing the field via an interface.
func (v *GetAllLoginsLoginsQueryableLogin) GetUpdatedAt() string { return v.UpdatedAt }

// GetEmail returns GetAllLoginsLoginsQueryableLogin.Email, and is useful for accessing the field via an interface.
func (v *GetAllLoginsLoginsQueryableLogin) GetEmail() GetAllLoginsLoginsIQueryableLoginEmailIQueryableEmail {
	return v.Email
}

// GetPhoneNumber returns GetAllLoginsLoginsQueryableLogin.PhoneNumber, and is useful for accessing the field via an interface.
func (v *GetAllLoginsLoginsQueryableLogin) GetPhoneNumber() GetAllLoginsLoginsIQueryableLoginPhoneNumberIQueryablePhoneNumber {
	return v.PhoneNumber
}

func (v *GetAllLoginsLoginsQueryableLogin) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAllLoginsLoginsQueryableLogin
		Email       json.RawMessage `json:"email"`
		PhoneNumber json.RawMessage `json:"phoneNumber"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAllLoginsLoginsQueryableLogin = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Email
		src := firstPass.Email
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetAllLoginsLoginsIQueryableLoginEmailIQueryableEmail(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetAllLoginsLoginsQueryableLogin.Email: %w", err)
			}
		}
	}

	{
		dst := &v.PhoneNumber
		src := firstPass.PhoneNumber
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetAllLoginsLoginsIQueryableLoginPhoneNumberIQueryablePhoneNumber(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetAllLoginsLoginsQueryableLogin.PhoneNumber: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetAllLoginsLoginsQueryableLogin struct {
	Typename string `json:"__typename"`

	Id string `json:"id"`

	Username string `json:"username"`

	CreatedAt string `json:"createdAt"`

	UpdatedAt string `json:"updatedAt"`

	Email json.RawMessage `json:"email"`

	PhoneNumber json.RawMessage `json:"phoneNumber"`
}

func (v *GetAllLoginsLoginsQueryableLogin) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAllLoginsLoginsQueryableLogin) __premarshalJSON() (*__premarshalGetAllLoginsLoginsQueryableLogin, error) {
	var retval __premarshalGetAllLoginsLoginsQueryableLogin

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Username = v.Username
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	{

		dst := &retval.Email
		src := v.Email
		var err error
		*dst, err = __marshalGetAllLoginsLoginsIQueryableLoginEmailIQueryableEmail(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetAllLoginsLoginsQueryableLogin.Email: %w", err)
		}
	}
	{

		dst := &retval.PhoneNumber
		src := v.PhoneNumber
		var err error
		*dst, err = __marshalGetAllLoginsLoginsIQueryableLoginPhoneNumberIQueryablePhoneNumber(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetAllLoginsLoginsQueryableLogin.PhoneNumber: %w", err)
		}
	}
	return &retval, nil
}

// GetAllLoginsResponse is returned by GetAllLogins on success.
type GetAllLoginsResponse struct {
	Logins []GetAllLoginsLoginsIQueryableLogin `json:"-"`
}

// GetLogins returns GetAllLoginsResponse.Logins, and is useful for accessing the field via an interface.
func (v *GetAllLoginsResponse) GetLogins() []GetAllLoginsLoginsIQueryableLogin { return v.Logins }

func (v *GetAllLoginsResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAllLoginsResponse
		Logins []json.RawMessage `json:"logins"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAllLoginsResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Logins
		src := firstPass.Logins
		*dst = make(
			[]GetAllLoginsLoginsIQueryableLogin,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalGetAllLoginsLoginsIQueryableLogin(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal GetAllLoginsResponse.Logins: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalGetAllLoginsResponse struct {
	Logins []json.RawMessage `json:"logins"`
}

func (v *GetAllLoginsResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAllLoginsResponse) __premarshalJSON() (*__premarshalGetAllLoginsResponse, error) {
	var retval __premarshalGetAllLoginsResponse

	{

		dst := &retval.Logins
		src := v.Logins
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalGetAllLoginsLoginsIQueryableLogin(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal GetAllLoginsResponse.Logins: %w", err)
			}
		}
	}
	return &retval, nil
}

// GetLoginLoginIQueryableLogin includes the requested fields of the GraphQL interface IQueryableLogin.
//
// GetLoginLoginIQueryableLogin is implemented by the following types:
// GetLoginLoginQueryableLogin
type GetLoginLoginIQueryableLogin interface {
	implementsGraphQLInterfaceGetLoginLoginIQueryableLogin()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetId returns the interface-field "id" from its implementation.
	GetId() string
	// GetUsername returns the interface-field "username" from its implementation.
	GetUsername() string
	// GetCreatedAt returns the interface-field "createdAt" from its implementation.
	GetCreatedAt() string
	// GetUpdatedAt returns the interface-field "updatedAt" from its implementation.
	GetUpdatedAt() string
	// GetEmail returns the interface-field "email" from its implementation.
	GetEmail() GetLoginLoginIQueryableLoginEmailIQueryableEmail
	// GetPhoneNumber returns the interface-field "phoneNumber" from its implementation.
	GetPhoneNumber() GetLoginLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber
}

func (v *GetLoginLoginQueryableLogin) implementsGraphQLInterfaceGetLoginLoginIQueryableLogin() {}

func __unmarshalGetLoginLoginIQueryableLogin(b []byte, v *GetLoginLoginIQueryableLogin) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "QueryableLogin":
		*v = new(GetLoginLoginQueryableLogin)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing IQueryableLogin.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetLoginLoginIQueryableLogin: "%v"`, tn.TypeName)
	}
}

func __marshalGetLoginLoginIQueryableLogin(v *GetLoginLoginIQueryableLogin) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetLoginLoginQueryableLogin:
		typename = "QueryableLogin"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetLoginLoginQueryableLogin
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetLoginLoginIQueryableLogin: "%T"`, v)
	}
}

// GetLoginLoginIQueryableLoginEmailIQueryableEmail includes the requested fields of the GraphQL interface IQueryableEmail.
//
// GetLoginLoginIQueryableLoginEmailIQueryableEmail is implemented by the following types:
// GetLoginLoginIQueryableLoginEmailQueryableEmail
type GetLoginLoginIQueryableLoginEmailIQueryableEmail interface {
	implementsGraphQLInterfaceGetLoginLoginIQueryableLoginEmailIQueryableEmail()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetAddress returns the interface-field "address" from its implementation.
	GetAddress() string
	// GetIsVerified returns the interface-field "isVerified" from its implementation.
	GetIsVerified() bool
}

func (v *GetLoginLoginIQueryableLoginEmailQueryableEmail) implementsGraphQLInterfaceGetLoginLoginIQueryableLoginEmailIQueryableEmail() {
}

func __unmarshalGetLoginLoginIQueryableLoginEmailIQueryableEmail(b []byte, v *GetLoginLoginIQueryableLoginEmailIQueryableEmail) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "QueryableEmail":
		*v = new(GetLoginLoginIQueryableLoginEmailQueryableEmail)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing IQueryableEmail.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetLoginLoginIQueryableLoginEmailIQueryableEmail: "%v"`, tn.TypeName)
	}
}

func __marshalGetLoginLoginIQueryableLoginEmailIQueryableEmail(v *GetLoginLoginIQueryableLoginEmailIQueryableEmail) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetLoginLoginIQueryableLoginEmailQueryableEmail:
		typename = "QueryableEmail"

		result := struct {
			TypeName string `json:"__typename"`
			*GetLoginLoginIQueryableLoginEmailQueryableEmail
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetLoginLoginIQueryableLoginEmailIQueryableEmail: "%T"`, v)
	}
}

// GetLoginLoginIQueryableLoginEmailQueryableEmail includes the requested fields of the GraphQL type QueryableEmail.
type GetLoginLoginIQueryableLoginEmailQueryableEmail struct {
	Typename   string `json:"__typename"`
	Address    string `json:"address"`
	IsVerified bool   `json:"isVerified"`
}

// GetTypename returns GetLoginLoginIQueryableLoginEmailQueryableEmail.Typename, and is useful for accessing the field via an interface.
func (v *GetLoginLoginIQueryableLoginEmailQueryableEmail) GetTypename() string { return v.Typename }

// GetAddress returns GetLoginLoginIQueryableLoginEmailQueryableEmail.Address, and is useful for accessing the field via an interface.
func (v *GetLoginLoginIQueryableLoginEmailQueryableEmail) GetAddress() string { return v.Address }

// GetIsVerified returns GetLoginLoginIQueryableLoginEmailQueryableEmail.IsVerified, and is useful for accessing the field via an interface.
func (v *GetLoginLoginIQueryableLoginEmailQueryableEmail) GetIsVerified() bool { return v.IsVerified }

// GetLoginLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber includes the requested fields of the GraphQL interface IQueryablePhoneNumber.
//
// GetLoginLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber is implemented by the following types:
// GetLoginLoginIQueryableLoginPhoneNumberQueryablePhoneNumber
type GetLoginLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber interface {
	implementsGraphQLInterfaceGetLoginLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetNumber returns the interface-field "number" from its implementation.
	GetNumber() string
	// GetIsVerified returns the interface-field "isVerified" from its implementation.
	GetIsVerified() bool
}

func (v *GetLoginLoginIQueryableLoginPhoneNumberQueryablePhoneNumber) implementsGraphQLInterfaceGetLoginLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber() {
}

func __unmarshalGetLoginLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber(b []byte, v *GetLoginLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "QueryablePhoneNumber":
		*v = new(GetLoginLoginIQueryableLoginPhoneNumberQueryablePhoneNumber)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing IQueryablePhoneNumber.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetLoginLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber: "%v"`, tn.TypeName)
	}
}

func __marshalGetLoginLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber(v *GetLoginLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetLoginLoginIQueryableLoginPhoneNumberQueryablePhoneNumber:
		typename = "QueryablePhoneNumber"

		result := struct {
			TypeName string `json:"__typename"`
			*GetLoginLoginIQueryableLoginPhoneNumberQueryablePhoneNumber
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetLoginLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber: "%T"`, v)
	}
}

// GetLoginLoginIQueryableLoginPhoneNumberQueryablePhoneNumber includes the requested fields of the GraphQL type QueryablePhoneNumber.
type GetLoginLoginIQueryableLoginPhoneNumberQueryablePhoneNumber struct {
	Typename   string `json:"__typename"`
	Number     string `json:"number"`
	IsVerified bool   `json:"isVerified"`
}

// GetTypename returns GetLoginLoginIQueryableLoginPhoneNumberQueryablePhoneNumber.Typename, and is useful for accessing the field via an interface.
func (v *GetLoginLoginIQueryableLoginPhoneNumberQueryablePhoneNumber) GetTypename() string {
	return v.Typename
}

// GetNumber returns GetLoginLoginIQueryableLoginPhoneNumberQueryablePhoneNumber.Number, and is useful for accessing the field via an interface.
func (v *GetLoginLoginIQueryableLoginPhoneNumberQueryablePhoneNumber) GetNumber() string {
	return v.Number
}

// GetIsVerified returns GetLoginLoginIQueryableLoginPhoneNumberQueryablePhoneNumber.IsVerified, and is useful for accessing the field via an interface.
func (v *GetLoginLoginIQueryableLoginPhoneNumberQueryablePhoneNumber) GetIsVerified() bool {
	return v.IsVerified
}

// GetLoginLoginQueryableLogin includes the requested fields of the GraphQL type QueryableLogin.
type GetLoginLoginQueryableLogin struct {
	Typename    string                                                       `json:"__typename"`
	Id          string                                                       `json:"id"`
	Username    string                                                       `json:"username"`
	CreatedAt   string                                                       `json:"createdAt"`
	UpdatedAt   string                                                       `json:"updatedAt"`
	Email       GetLoginLoginIQueryableLoginEmailIQueryableEmail             `json:"-"`
	PhoneNumber GetLoginLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber `json:"-"`
}

// GetTypename returns GetLoginLoginQueryableLogin.Typename, and is useful for accessing the field via an interface.
func (v *GetLoginLoginQueryableLogin) GetTypename() string { return v.Typename }

// GetId returns GetLoginLoginQueryableLogin.Id, and is useful for accessing the field via an interface.
func (v *GetLoginLoginQueryableLogin) GetId() string { return v.Id }

// GetUsername returns GetLoginLoginQueryableLogin.Username, and is useful for accessing the field via an interface.
func (v *GetLoginLoginQueryableLogin) GetUsername() string { return v.Username }

// GetCreatedAt returns GetLoginLoginQueryableLogin.CreatedAt, and is useful for accessing the field via an interface.
func (v *GetLoginLoginQueryableLogin) GetCreatedAt() string { return v.CreatedAt }

// GetUpdatedAt returns GetLoginLoginQueryableLogin.UpdatedAt, and is useful for accessing the field via an interface.
func (v *GetLoginLoginQueryableLogin) GetUpdatedAt() string { return v.UpdatedAt }

// GetEmail returns GetLoginLoginQueryableLogin.Email, and is useful for accessing the field via an interface.
func (v *GetLoginLoginQueryableLogin) GetEmail() GetLoginLoginIQueryableLoginEmailIQueryableEmail {
	return v.Email
}

// GetPhoneNumber returns GetLoginLoginQueryableLogin.PhoneNumber, and is useful for accessing the field via an interface.
func (v *GetLoginLoginQueryableLogin) GetPhoneNumber() GetLoginLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber {
	return v.PhoneNumber
}

func (v *GetLoginLoginQueryableLogin) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetLoginLoginQueryableLogin
		Email       json.RawMessage `json:"email"`
		PhoneNumber json.RawMessage `json:"phoneNumber"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetLoginLoginQueryableLogin = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Email
		src := firstPass.Email
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetLoginLoginIQueryableLoginEmailIQueryableEmail(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetLoginLoginQueryableLogin.Email: %w", err)
			}
		}
	}

	{
		dst := &v.PhoneNumber
		src := firstPass.PhoneNumber
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetLoginLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetLoginLoginQueryableLogin.PhoneNumber: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetLoginLoginQueryableLogin struct {
	Typename string `json:"__typename"`

	Id string `json:"id"`

	Username string `json:"username"`

	CreatedAt string `json:"createdAt"`

	UpdatedAt string `json:"updatedAt"`

	Email json.RawMessage `json:"email"`

	PhoneNumber json.RawMessage `json:"phoneNumber"`
}

func (v *GetLoginLoginQueryableLogin) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetLoginLoginQueryableLogin) __premarshalJSON() (*__premarshalGetLoginLoginQueryableLogin, error) {
	var retval __premarshalGetLoginLoginQueryableLogin

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Username = v.Username
	retval.CreatedAt = v.CreatedAt
	retval.UpdatedAt = v.UpdatedAt
	{

		dst := &retval.Email
		src := v.Email
		var err error
		*dst, err = __marshalGetLoginLoginIQueryableLoginEmailIQueryableEmail(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetLoginLoginQueryableLogin.Email: %w", err)
		}
	}
	{

		dst := &retval.PhoneNumber
		src := v.PhoneNumber
		var err error
		*dst, err = __marshalGetLoginLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetLoginLoginQueryableLogin.PhoneNumber: %w", err)
		}
	}
	return &retval, nil
}

// GetLoginResponse is returned by GetLogin on success.
type GetLoginResponse struct {
	Login GetLoginLoginIQueryableLogin `json:"-"`
}

// GetLogin returns GetLoginResponse.Login, and is useful for accessing the field via an interface.
func (v *GetLoginResponse) GetLogin() GetLoginLoginIQueryableLogin { return v.Login }

func (v *GetLoginResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetLoginResponse
		Login json.RawMessage `json:"login"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetLoginResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Login
		src := firstPass.Login
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetLoginLoginIQueryableLogin(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetLoginResponse.Login: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetLoginResponse struct {
	Login json.RawMessage `json:"login"`
}

func (v *GetLoginResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetLoginResponse) __premarshalJSON() (*__premarshalGetLoginResponse, error) {
	var retval __premarshalGetLoginResponse

	{

		dst := &retval.Login
		src := v.Login
		var err error
		*dst, err = __marshalGetLoginLoginIQueryableLogin(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetLoginResponse.Login: %w", err)
		}
	}
	return &retval, nil
}

// LogInWithPasswordLoginSessionIQueryableLoginSession includes the requested fields of the GraphQL interface IQueryableLoginSession.
//
// LogInWithPasswordLoginSessionIQueryableLoginSession is implemented by the following types:
// LogInWithPasswordLoginSessionQueryableLoginSession
type LogInWithPasswordLoginSessionIQueryableLoginSession interface {
	implementsGraphQLInterfaceLogInWithPasswordLoginSessionIQueryableLoginSession()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetId returns the interface-field "id" from its implementation.
	GetId() string
	// GetIdentifyingToken returns the interface-field "identifyingToken" from its implementation.
	GetIdentifyingToken() string
	// GetIsSolved returns the interface-field "isSolved" from its implementation.
	GetIsSolved() bool
}

func (v *LogInWithPasswordLoginSessionQueryableLoginSession) implementsGraphQLInterfaceLogInWithPasswordLoginSessionIQueryableLoginSession() {
}

func __unmarshalLogInWithPasswordLoginSessionIQueryableLoginSession(b []byte, v *LogInWithPasswordLoginSessionIQueryableLoginSession) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "QueryableLoginSession":
		*v = new(LogInWithPasswordLoginSessionQueryableLoginSession)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing IQueryableLoginSession.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for LogInWithPasswordLoginSessionIQueryableLoginSession: "%v"`, tn.TypeName)
	}
}

func __marshalLogInWithPasswordLoginSessionIQueryableLoginSession(v *LogInWithPasswordLoginSessionIQueryableLoginSession) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *LogInWithPasswordLoginSessionQueryableLoginSession:
		typename = "QueryableLoginSession"

		result := struct {
			TypeName string `json:"__typename"`
			*LogInWithPasswordLoginSessionQueryableLoginSession
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for LogInWithPasswordLoginSessionIQueryableLoginSession: "%T"`, v)
	}
}

// LogInWithPasswordLoginSessionQueryableLoginSession includes the requested fields of the GraphQL type QueryableLoginSession.
type LogInWithPasswordLoginSessionQueryableLoginSession struct {
	Typename         string `json:"__typename"`
	Id               string `json:"id"`
	IdentifyingToken string `json:"identifyingToken"`
	IsSolved         bool   `json:"isSolved"`
}

// GetTypename returns LogInWithPasswordLoginSessionQueryableLoginSession.Typename, and is useful for accessing the field via an interface.
func (v *LogInWithPasswordLoginSessionQueryableLoginSession) GetTypename() string { return v.Typename }

// GetId returns LogInWithPasswordLoginSessionQueryableLoginSession.Id, and is useful for accessing the field via an interface.
func (v *LogInWithPasswordLoginSessionQueryableLoginSession) GetId() string { return v.Id }

// GetIdentifyingToken returns LogInWithPasswordLoginSessionQueryableLoginSession.IdentifyingToken, and is useful for accessing the field via an interface.
func (v *LogInWithPasswordLoginSessionQueryableLoginSession) GetIdentifyingToken() string {
	return v.IdentifyingToken
}

// GetIsSolved returns LogInWithPasswordLoginSessionQueryableLoginSession.IsSolved, and is useful for accessing the field via an interface.
func (v *LogInWithPasswordLoginSessionQueryableLoginSession) GetIsSolved() bool { return v.IsSolved }

// LogInWithPasswordResponse is returned by LogInWithPassword on success.
type LogInWithPasswordResponse struct {
	LoginSession LogInWithPasswordLoginSessionIQueryableLoginSession `json:"-"`
}

// GetLoginSession returns LogInWithPasswordResponse.LoginSession, and is useful for accessing the field via an interface.
func (v *LogInWithPasswordResponse) GetLoginSession() LogInWithPasswordLoginSessionIQueryableLoginSession {
	return v.LoginSession
}

func (v *LogInWithPasswordResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*LogInWithPasswordResponse
		LoginSession json.RawMessage `json:"loginSession"`
		graphql.NoUnmarshalJSON
	}
	firstPass.LogInWithPasswordResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.LoginSession
		src := firstPass.LoginSession
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalLogInWithPasswordLoginSessionIQueryableLoginSession(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal LogInWithPasswordResponse.LoginSession: %w", err)
			}
		}
	}
	return nil
}

type __premarshalLogInWithPasswordResponse struct {
	LoginSession json.RawMessage `json:"loginSession"`
}

func (v *LogInWithPasswordResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *LogInWithPasswordResponse) __premarshalJSON() (*__premarshalLogInWithPasswordResponse, error) {
	var retval __premarshalLogInWithPasswordResponse

	{

		dst := &retval.LoginSession
		src := v.LoginSession
		var err error
		*dst, err = __marshalLogInWithPasswordLoginSessionIQueryableLoginSession(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal LogInWithPasswordResponse.LoginSession: %w", err)
		}
	}
	return &retval, nil
}

// RemoveLoginRemoveLoginIQueryableLogin includes the requested fields of the GraphQL interface IQueryableLogin.
//
// RemoveLoginRemoveLoginIQueryableLogin is implemented by the following types:
// RemoveLoginRemoveLoginQueryableLogin
type RemoveLoginRemoveLoginIQueryableLogin interface {
	implementsGraphQLInterfaceRemoveLoginRemoveLoginIQueryableLogin()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetId returns the interface-field "id" from its implementation.
	GetId() string
	// GetUsername returns the interface-field "username" from its implementation.
	GetUsername() string
}

func (v *RemoveLoginRemoveLoginQueryableLogin) implementsGraphQLInterfaceRemoveLoginRemoveLoginIQueryableLogin() {
}

func __unmarshalRemoveLoginRemoveLoginIQueryableLogin(b []byte, v *RemoveLoginRemoveLoginIQueryableLogin) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "QueryableLogin":
		*v = new(RemoveLoginRemoveLoginQueryableLogin)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing IQueryableLogin.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for RemoveLoginRemoveLoginIQueryableLogin: "%v"`, tn.TypeName)
	}
}

func __marshalRemoveLoginRemoveLoginIQueryableLogin(v *RemoveLoginRemoveLoginIQueryableLogin) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *RemoveLoginRemoveLoginQueryableLogin:
		typename = "QueryableLogin"

		result := struct {
			TypeName string `json:"__typename"`
			*RemoveLoginRemoveLoginQueryableLogin
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for RemoveLoginRemoveLoginIQueryableLogin: "%T"`, v)
	}
}

// RemoveLoginRemoveLoginQueryableLogin includes the requested fields of the GraphQL type QueryableLogin.
type RemoveLoginRemoveLoginQueryableLogin struct {
	Typename string `json:"__typename"`
	Id       string `json:"id"`
	Username string `json:"username"`
}

// GetTypename returns RemoveLoginRemoveLoginQueryableLogin.Typename, and is useful for accessing the field via an interface.
func (v *RemoveLoginRemoveLoginQueryableLogin) GetTypename() string { return v.Typename }

// GetId returns RemoveLoginRemoveLoginQueryableLogin.Id, and is useful for accessing the field via an interface.
func (v *RemoveLoginRemoveLoginQueryableLogin) GetId() string { return v.Id }

// GetUsername returns RemoveLoginRemoveLoginQueryableLogin.Username, and is useful for accessing the field via an interface.
func (v *RemoveLoginRemoveLoginQueryableLogin) GetUsername() string { return v.Username }

// RemoveLoginResponse is returned by RemoveLogin on success.
type RemoveLoginResponse struct {
	RemoveLogin RemoveLoginRemoveLoginIQueryableLogin `json:"-"`
}

// GetRemoveLogin returns RemoveLoginResponse.RemoveLogin, and is useful for accessing the field via an interface.
func (v *RemoveLoginResponse) GetRemoveLogin() RemoveLoginRemoveLoginIQueryableLogin {
	return v.RemoveLogin
}

func (v *RemoveLoginResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RemoveLoginResponse
		RemoveLogin json.RawMessage `json:"removeLogin"`
		graphql.NoUnmarshalJSON
	}
	firstPass.RemoveLoginResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.RemoveLogin
		src := firstPass.RemoveLogin
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalRemoveLoginRemoveLoginIQueryableLogin(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal RemoveLoginResponse.RemoveLogin: %w", err)
			}
		}
	}
	return nil
}

type __premarshalRemoveLoginResponse struct {
	RemoveLogin json.RawMessage `json:"removeLogin"`
}

func (v *RemoveLoginResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RemoveLoginResponse) __premarshalJSON() (*__premarshalRemoveLoginResponse, error) {
	var retval __premarshalRemoveLoginResponse

	{

		dst := &retval.RemoveLogin
		src := v.RemoveLogin
		var err error
		*dst, err = __marshalRemoveLoginRemoveLoginIQueryableLogin(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal RemoveLoginResponse.RemoveLogin: %w", err)
		}
	}
	return &retval, nil
}

// __CreateLoginInput is used internally by genqlient
type __CreateLoginInput struct {
	Username    string `json:"username"`
	Email       string `json:"email"`
	PhoneNumber string `json:"phoneNumber"`
	Password    string `json:"password"`
}

// GetUsername returns __CreateLoginInput.Username, and is useful for accessing the field via an interface.
func (v *__CreateLoginInput) GetUsername() string { return v.Username }

// GetEmail returns __CreateLoginInput.Email, and is useful for accessing the field via an interface.
func (v *__CreateLoginInput) GetEmail() string { return v.Email }

// GetPhoneNumber returns __CreateLoginInput.PhoneNumber, and is useful for accessing the field via an interface.
func (v *__CreateLoginInput) GetPhoneNumber() string { return v.PhoneNumber }

// GetPassword returns __CreateLoginInput.Password, and is useful for accessing the field via an interface.
func (v *__CreateLoginInput) GetPassword() string { return v.Password }

// __GetLoginInput is used internally by genqlient
type __GetLoginInput struct {
	Username string `json:"username"`
}

// GetUsername returns __GetLoginInput.Username, and is useful for accessing the field via an interface.
func (v *__GetLoginInput) GetUsername() string { return v.Username }

// __LogInWithPasswordInput is used internally by genqlient
type __LogInWithPasswordInput struct {
	Email    *string `json:"email"`
	Username *string `json:"username"`
	Password string `json:"password"`
}

// GetEmail returns __LogInWithPasswordInput.Email, and is useful for accessing the field via an interface.
func (v *__LogInWithPasswordInput) GetEmail() *string { return v.Email }

// GetUsername returns __LogInWithPasswordInput.Username, and is useful for accessing the field via an interface.
func (v *__LogInWithPasswordInput) GetUsername() *string { return v.Username }

// GetPassword returns __LogInWithPasswordInput.Password, and is useful for accessing the field via an interface.
func (v *__LogInWithPasswordInput) GetPassword() string { return v.Password }

// __RemoveLoginInput is used internally by genqlient
type __RemoveLoginInput struct {
	Id string `json:"id"`
}

// GetId returns __RemoveLoginInput.Id, and is useful for accessing the field via an interface.
func (v *__RemoveLoginInput) GetId() string { return v.Id }

// The query or mutation executed by CreateLogin.
const CreateLogin_Operation = `
mutation CreateLogin ($username: String, $email: String, $phoneNumber: String, $password: String!) {
	newLogin: createLogin(username: $username, email: $email, phoneNumber: $phoneNumber, password: $password) {
		__typename
		id
		username
	}
}
`

func CreateLogin(
	ctx_ context.Context,
	client_ graphql.Client,
	username string,
	email string,
	phoneNumber string,
	password string,
) (*CreateLoginResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateLogin",
		Query:  CreateLogin_Operation,
		Variables: &__CreateLoginInput{
			Username:    username,
			Email:       email,
			PhoneNumber: phoneNumber,
			Password:    password,
		},
	}
	var err_ error

	var data_ CreateLoginResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetAllLogins.
const GetAllLogins_Operation = `
query GetAllLogins {
	logins {
		__typename
		id
		username
		createdAt
		updatedAt
		email {
			__typename
			address
			isVerified
		}
		phoneNumber {
			__typename
			number
			isVerified
		}
	}
}
`

func GetAllLogins(
	ctx_ context.Context,
	client_ graphql.Client,
) (*GetAllLoginsResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetAllLogins",
		Query:  GetAllLogins_Operation,
	}
	var err_ error

	var data_ GetAllLoginsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetLogin.
const GetLogin_Operation = `
query GetLogin ($username: String!) {
	login(username: $username) {
		__typename
		id
		username
		createdAt
		updatedAt
		email {
			__typename
			address
			isVerified
		}
		phoneNumber {
			__typename
			number
			isVerified
		}
	}
}
`

func GetLogin(
	ctx_ context.Context,
	client_ graphql.Client,
	username string,
) (*GetLoginResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetLogin",
		Query:  GetLogin_Operation,
		Variables: &__GetLoginInput{
			Username: username,
		},
	}
	var err_ error

	var data_ GetLoginResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by LogInWithPassword.
const LogInWithPassword_Operation = `
mutation LogInWithPassword ($email: String, $username: String, $password: String!) {
	loginSession: logInWithPassword(email: $email, username: $username, password: $password) {
		__typename
		id
		identifyingToken
		isSolved
	}
}
`

func LogInWithPassword(
	ctx_ context.Context,
	client_ graphql.Client,
	email *string,
	username *string,
	password string,
) (*LogInWithPasswordResponse, error) {
	req_ := &graphql.Request{
		OpName: "LogInWithPassword",
		Query:  LogInWithPassword_Operation,
		Variables: &__LogInWithPasswordInput{
			Email:    email,
			Username: username,
			Password: password,
		},
	}
	var err_ error

	var data_ LogInWithPasswordResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by RemoveLogin.
const RemoveLogin_Operation = `
mutation RemoveLogin ($id: String!) {
	removeLogin(id: $id) {
		__typename
		id
		username
	}
}
`

func RemoveLogin(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (*RemoveLoginResponse, error) {
	req_ := &graphql.Request{
		OpName: "RemoveLogin",
		Query:  RemoveLogin_Operation,
		Variables: &__RemoveLoginInput{
			Id: id,
		},
	}
	var err_ error

	var data_ RemoveLoginResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
