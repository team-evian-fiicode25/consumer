// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package services

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
)

// CreateLoginNewLoginIQueryableLogin includes the requested fields of the GraphQL interface IQueryableLogin.
//
// CreateLoginNewLoginIQueryableLogin is implemented by the following types:
// CreateLoginNewLoginQueryableLogin
type CreateLoginNewLoginIQueryableLogin interface {
	implementsGraphQLInterfaceCreateLoginNewLoginIQueryableLogin()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetId returns the interface-field "id" from its implementation.
	GetId() string
	// GetUsername returns the interface-field "username" from its implementation.
	GetUsername() string
	// GetEmail returns the interface-field "email" from its implementation.
	GetEmail() CreateLoginNewLoginIQueryableLoginEmailIQueryableEmail
	// GetPhoneNumber returns the interface-field "phoneNumber" from its implementation.
	GetPhoneNumber() CreateLoginNewLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber
}

func (v *CreateLoginNewLoginQueryableLogin) implementsGraphQLInterfaceCreateLoginNewLoginIQueryableLogin() {
}

func __unmarshalCreateLoginNewLoginIQueryableLogin(b []byte, v *CreateLoginNewLoginIQueryableLogin) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "QueryableLogin":
		*v = new(CreateLoginNewLoginQueryableLogin)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing IQueryableLogin.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for CreateLoginNewLoginIQueryableLogin: "%v"`, tn.TypeName)
	}
}

func __marshalCreateLoginNewLoginIQueryableLogin(v *CreateLoginNewLoginIQueryableLogin) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *CreateLoginNewLoginQueryableLogin:
		typename = "QueryableLogin"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalCreateLoginNewLoginQueryableLogin
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for CreateLoginNewLoginIQueryableLogin: "%T"`, v)
	}
}

// CreateLoginNewLoginIQueryableLoginEmailIQueryableEmail includes the requested fields of the GraphQL interface IQueryableEmail.
//
// CreateLoginNewLoginIQueryableLoginEmailIQueryableEmail is implemented by the following types:
// CreateLoginNewLoginIQueryableLoginEmailQueryableEmail
type CreateLoginNewLoginIQueryableLoginEmailIQueryableEmail interface {
	implementsGraphQLInterfaceCreateLoginNewLoginIQueryableLoginEmailIQueryableEmail()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetAddress returns the interface-field "address" from its implementation.
	GetAddress() string
}

func (v *CreateLoginNewLoginIQueryableLoginEmailQueryableEmail) implementsGraphQLInterfaceCreateLoginNewLoginIQueryableLoginEmailIQueryableEmail() {
}

func __unmarshalCreateLoginNewLoginIQueryableLoginEmailIQueryableEmail(b []byte, v *CreateLoginNewLoginIQueryableLoginEmailIQueryableEmail) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "QueryableEmail":
		*v = new(CreateLoginNewLoginIQueryableLoginEmailQueryableEmail)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing IQueryableEmail.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for CreateLoginNewLoginIQueryableLoginEmailIQueryableEmail: "%v"`, tn.TypeName)
	}
}

func __marshalCreateLoginNewLoginIQueryableLoginEmailIQueryableEmail(v *CreateLoginNewLoginIQueryableLoginEmailIQueryableEmail) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *CreateLoginNewLoginIQueryableLoginEmailQueryableEmail:
		typename = "QueryableEmail"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateLoginNewLoginIQueryableLoginEmailQueryableEmail
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for CreateLoginNewLoginIQueryableLoginEmailIQueryableEmail: "%T"`, v)
	}
}

// CreateLoginNewLoginIQueryableLoginEmailQueryableEmail includes the requested fields of the GraphQL type QueryableEmail.
type CreateLoginNewLoginIQueryableLoginEmailQueryableEmail struct {
	Typename string `json:"__typename"`
	Address  string `json:"address"`
}

// GetTypename returns CreateLoginNewLoginIQueryableLoginEmailQueryableEmail.Typename, and is useful for accessing the field via an interface.
func (v *CreateLoginNewLoginIQueryableLoginEmailQueryableEmail) GetTypename() string {
	return v.Typename
}

// GetAddress returns CreateLoginNewLoginIQueryableLoginEmailQueryableEmail.Address, and is useful for accessing the field via an interface.
func (v *CreateLoginNewLoginIQueryableLoginEmailQueryableEmail) GetAddress() string { return v.Address }

// CreateLoginNewLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber includes the requested fields of the GraphQL interface IQueryablePhoneNumber.
//
// CreateLoginNewLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber is implemented by the following types:
// CreateLoginNewLoginIQueryableLoginPhoneNumberQueryablePhoneNumber
type CreateLoginNewLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber interface {
	implementsGraphQLInterfaceCreateLoginNewLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetNumber returns the interface-field "number" from its implementation.
	GetNumber() string
}

func (v *CreateLoginNewLoginIQueryableLoginPhoneNumberQueryablePhoneNumber) implementsGraphQLInterfaceCreateLoginNewLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber() {
}

func __unmarshalCreateLoginNewLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber(b []byte, v *CreateLoginNewLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "QueryablePhoneNumber":
		*v = new(CreateLoginNewLoginIQueryableLoginPhoneNumberQueryablePhoneNumber)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing IQueryablePhoneNumber.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for CreateLoginNewLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber: "%v"`, tn.TypeName)
	}
}

func __marshalCreateLoginNewLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber(v *CreateLoginNewLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *CreateLoginNewLoginIQueryableLoginPhoneNumberQueryablePhoneNumber:
		typename = "QueryablePhoneNumber"

		result := struct {
			TypeName string `json:"__typename"`
			*CreateLoginNewLoginIQueryableLoginPhoneNumberQueryablePhoneNumber
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for CreateLoginNewLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber: "%T"`, v)
	}
}

// CreateLoginNewLoginIQueryableLoginPhoneNumberQueryablePhoneNumber includes the requested fields of the GraphQL type QueryablePhoneNumber.
type CreateLoginNewLoginIQueryableLoginPhoneNumberQueryablePhoneNumber struct {
	Typename string `json:"__typename"`
	Number   string `json:"number"`
}

// GetTypename returns CreateLoginNewLoginIQueryableLoginPhoneNumberQueryablePhoneNumber.Typename, and is useful for accessing the field via an interface.
func (v *CreateLoginNewLoginIQueryableLoginPhoneNumberQueryablePhoneNumber) GetTypename() string {
	return v.Typename
}

// GetNumber returns CreateLoginNewLoginIQueryableLoginPhoneNumberQueryablePhoneNumber.Number, and is useful for accessing the field via an interface.
func (v *CreateLoginNewLoginIQueryableLoginPhoneNumberQueryablePhoneNumber) GetNumber() string {
	return v.Number
}

// CreateLoginNewLoginQueryableLogin includes the requested fields of the GraphQL type QueryableLogin.
type CreateLoginNewLoginQueryableLogin struct {
	Typename    string                                                             `json:"__typename"`
	Id          string                                                             `json:"id"`
	Username    string                                                             `json:"username"`
	Email       CreateLoginNewLoginIQueryableLoginEmailIQueryableEmail             `json:"-"`
	PhoneNumber CreateLoginNewLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber `json:"-"`
}

// GetTypename returns CreateLoginNewLoginQueryableLogin.Typename, and is useful for accessing the field via an interface.
func (v *CreateLoginNewLoginQueryableLogin) GetTypename() string { return v.Typename }

// GetId returns CreateLoginNewLoginQueryableLogin.Id, and is useful for accessing the field via an interface.
func (v *CreateLoginNewLoginQueryableLogin) GetId() string { return v.Id }

// GetUsername returns CreateLoginNewLoginQueryableLogin.Username, and is useful for accessing the field via an interface.
func (v *CreateLoginNewLoginQueryableLogin) GetUsername() string { return v.Username }

// GetEmail returns CreateLoginNewLoginQueryableLogin.Email, and is useful for accessing the field via an interface.
func (v *CreateLoginNewLoginQueryableLogin) GetEmail() CreateLoginNewLoginIQueryableLoginEmailIQueryableEmail {
	return v.Email
}

// GetPhoneNumber returns CreateLoginNewLoginQueryableLogin.PhoneNumber, and is useful for accessing the field via an interface.
func (v *CreateLoginNewLoginQueryableLogin) GetPhoneNumber() CreateLoginNewLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber {
	return v.PhoneNumber
}

func (v *CreateLoginNewLoginQueryableLogin) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateLoginNewLoginQueryableLogin
		Email       json.RawMessage `json:"email"`
		PhoneNumber json.RawMessage `json:"phoneNumber"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateLoginNewLoginQueryableLogin = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Email
		src := firstPass.Email
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalCreateLoginNewLoginIQueryableLoginEmailIQueryableEmail(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal CreateLoginNewLoginQueryableLogin.Email: %w", err)
			}
		}
	}

	{
		dst := &v.PhoneNumber
		src := firstPass.PhoneNumber
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalCreateLoginNewLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal CreateLoginNewLoginQueryableLogin.PhoneNumber: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCreateLoginNewLoginQueryableLogin struct {
	Typename string `json:"__typename"`

	Id string `json:"id"`

	Username string `json:"username"`

	Email json.RawMessage `json:"email"`

	PhoneNumber json.RawMessage `json:"phoneNumber"`
}

func (v *CreateLoginNewLoginQueryableLogin) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateLoginNewLoginQueryableLogin) __premarshalJSON() (*__premarshalCreateLoginNewLoginQueryableLogin, error) {
	var retval __premarshalCreateLoginNewLoginQueryableLogin

	retval.Typename = v.Typename
	retval.Id = v.Id
	retval.Username = v.Username
	{

		dst := &retval.Email
		src := v.Email
		var err error
		*dst, err = __marshalCreateLoginNewLoginIQueryableLoginEmailIQueryableEmail(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateLoginNewLoginQueryableLogin.Email: %w", err)
		}
	}
	{

		dst := &retval.PhoneNumber
		src := v.PhoneNumber
		var err error
		*dst, err = __marshalCreateLoginNewLoginIQueryableLoginPhoneNumberIQueryablePhoneNumber(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateLoginNewLoginQueryableLogin.PhoneNumber: %w", err)
		}
	}
	return &retval, nil
}

// CreateLoginResponse is returned by CreateLogin on success.
type CreateLoginResponse struct {
	NewLogin CreateLoginNewLoginIQueryableLogin `json:"-"`
}

// GetNewLogin returns CreateLoginResponse.NewLogin, and is useful for accessing the field via an interface.
func (v *CreateLoginResponse) GetNewLogin() CreateLoginNewLoginIQueryableLogin { return v.NewLogin }

func (v *CreateLoginResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateLoginResponse
		NewLogin json.RawMessage `json:"newLogin"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateLoginResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.NewLogin
		src := firstPass.NewLogin
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalCreateLoginNewLoginIQueryableLogin(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal CreateLoginResponse.NewLogin: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCreateLoginResponse struct {
	NewLogin json.RawMessage `json:"newLogin"`
}

func (v *CreateLoginResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateLoginResponse) __premarshalJSON() (*__premarshalCreateLoginResponse, error) {
	var retval __premarshalCreateLoginResponse

	{

		dst := &retval.NewLogin
		src := v.NewLogin
		var err error
		*dst, err = __marshalCreateLoginNewLoginIQueryableLogin(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal CreateLoginResponse.NewLogin: %w", err)
		}
	}
	return &retval, nil
}

// LogInWithEmailLoginSessionIQueryableLoginSession includes the requested fields of the GraphQL interface IQueryableLoginSession.
//
// LogInWithEmailLoginSessionIQueryableLoginSession is implemented by the following types:
// LogInWithEmailLoginSessionQueryableLoginSession
type LogInWithEmailLoginSessionIQueryableLoginSession interface {
	implementsGraphQLInterfaceLogInWithEmailLoginSessionIQueryableLoginSession()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetSessionToken returns the interface-field "sessionToken" from its implementation.
	GetSessionToken() LogInWithEmailLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken
}

func (v *LogInWithEmailLoginSessionQueryableLoginSession) implementsGraphQLInterfaceLogInWithEmailLoginSessionIQueryableLoginSession() {
}

func __unmarshalLogInWithEmailLoginSessionIQueryableLoginSession(b []byte, v *LogInWithEmailLoginSessionIQueryableLoginSession) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "QueryableLoginSession":
		*v = new(LogInWithEmailLoginSessionQueryableLoginSession)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing IQueryableLoginSession.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for LogInWithEmailLoginSessionIQueryableLoginSession: "%v"`, tn.TypeName)
	}
}

func __marshalLogInWithEmailLoginSessionIQueryableLoginSession(v *LogInWithEmailLoginSessionIQueryableLoginSession) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *LogInWithEmailLoginSessionQueryableLoginSession:
		typename = "QueryableLoginSession"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalLogInWithEmailLoginSessionQueryableLoginSession
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for LogInWithEmailLoginSessionIQueryableLoginSession: "%T"`, v)
	}
}

// LogInWithEmailLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken includes the requested fields of the GraphQL interface IQueryableSessionToken.
//
// LogInWithEmailLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken is implemented by the following types:
// LogInWithEmailLoginSessionIQueryableLoginSessionSessionTokenQueryableSessionToken
type LogInWithEmailLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken interface {
	implementsGraphQLInterfaceLogInWithEmailLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetToken returns the interface-field "token" from its implementation.
	GetToken() string
}

func (v *LogInWithEmailLoginSessionIQueryableLoginSessionSessionTokenQueryableSessionToken) implementsGraphQLInterfaceLogInWithEmailLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken() {
}

func __unmarshalLogInWithEmailLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken(b []byte, v *LogInWithEmailLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "QueryableSessionToken":
		*v = new(LogInWithEmailLoginSessionIQueryableLoginSessionSessionTokenQueryableSessionToken)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing IQueryableSessionToken.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for LogInWithEmailLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken: "%v"`, tn.TypeName)
	}
}

func __marshalLogInWithEmailLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken(v *LogInWithEmailLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *LogInWithEmailLoginSessionIQueryableLoginSessionSessionTokenQueryableSessionToken:
		typename = "QueryableSessionToken"

		result := struct {
			TypeName string `json:"__typename"`
			*LogInWithEmailLoginSessionIQueryableLoginSessionSessionTokenQueryableSessionToken
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for LogInWithEmailLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken: "%T"`, v)
	}
}

// LogInWithEmailLoginSessionIQueryableLoginSessionSessionTokenQueryableSessionToken includes the requested fields of the GraphQL type QueryableSessionToken.
type LogInWithEmailLoginSessionIQueryableLoginSessionSessionTokenQueryableSessionToken struct {
	Typename string `json:"__typename"`
	Token    string `json:"token"`
}

// GetTypename returns LogInWithEmailLoginSessionIQueryableLoginSessionSessionTokenQueryableSessionToken.Typename, and is useful for accessing the field via an interface.
func (v *LogInWithEmailLoginSessionIQueryableLoginSessionSessionTokenQueryableSessionToken) GetTypename() string {
	return v.Typename
}

// GetToken returns LogInWithEmailLoginSessionIQueryableLoginSessionSessionTokenQueryableSessionToken.Token, and is useful for accessing the field via an interface.
func (v *LogInWithEmailLoginSessionIQueryableLoginSessionSessionTokenQueryableSessionToken) GetToken() string {
	return v.Token
}

// LogInWithEmailLoginSessionQueryableLoginSession includes the requested fields of the GraphQL type QueryableLoginSession.
type LogInWithEmailLoginSessionQueryableLoginSession struct {
	Typename     string                                                                             `json:"__typename"`
	SessionToken LogInWithEmailLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken `json:"-"`
}

// GetTypename returns LogInWithEmailLoginSessionQueryableLoginSession.Typename, and is useful for accessing the field via an interface.
func (v *LogInWithEmailLoginSessionQueryableLoginSession) GetTypename() string { return v.Typename }

// GetSessionToken returns LogInWithEmailLoginSessionQueryableLoginSession.SessionToken, and is useful for accessing the field via an interface.
func (v *LogInWithEmailLoginSessionQueryableLoginSession) GetSessionToken() LogInWithEmailLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken {
	return v.SessionToken
}

func (v *LogInWithEmailLoginSessionQueryableLoginSession) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*LogInWithEmailLoginSessionQueryableLoginSession
		SessionToken json.RawMessage `json:"sessionToken"`
		graphql.NoUnmarshalJSON
	}
	firstPass.LogInWithEmailLoginSessionQueryableLoginSession = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.SessionToken
		src := firstPass.SessionToken
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalLogInWithEmailLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal LogInWithEmailLoginSessionQueryableLoginSession.SessionToken: %w", err)
			}
		}
	}
	return nil
}

type __premarshalLogInWithEmailLoginSessionQueryableLoginSession struct {
	Typename string `json:"__typename"`

	SessionToken json.RawMessage `json:"sessionToken"`
}

func (v *LogInWithEmailLoginSessionQueryableLoginSession) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *LogInWithEmailLoginSessionQueryableLoginSession) __premarshalJSON() (*__premarshalLogInWithEmailLoginSessionQueryableLoginSession, error) {
	var retval __premarshalLogInWithEmailLoginSessionQueryableLoginSession

	retval.Typename = v.Typename
	{

		dst := &retval.SessionToken
		src := v.SessionToken
		var err error
		*dst, err = __marshalLogInWithEmailLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal LogInWithEmailLoginSessionQueryableLoginSession.SessionToken: %w", err)
		}
	}
	return &retval, nil
}

// LogInWithEmailResponse is returned by LogInWithEmail on success.
type LogInWithEmailResponse struct {
	LoginSession LogInWithEmailLoginSessionIQueryableLoginSession `json:"-"`
}

// GetLoginSession returns LogInWithEmailResponse.LoginSession, and is useful for accessing the field via an interface.
func (v *LogInWithEmailResponse) GetLoginSession() LogInWithEmailLoginSessionIQueryableLoginSession {
	return v.LoginSession
}

func (v *LogInWithEmailResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*LogInWithEmailResponse
		LoginSession json.RawMessage `json:"loginSession"`
		graphql.NoUnmarshalJSON
	}
	firstPass.LogInWithEmailResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.LoginSession
		src := firstPass.LoginSession
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalLogInWithEmailLoginSessionIQueryableLoginSession(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal LogInWithEmailResponse.LoginSession: %w", err)
			}
		}
	}
	return nil
}

type __premarshalLogInWithEmailResponse struct {
	LoginSession json.RawMessage `json:"loginSession"`
}

func (v *LogInWithEmailResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *LogInWithEmailResponse) __premarshalJSON() (*__premarshalLogInWithEmailResponse, error) {
	var retval __premarshalLogInWithEmailResponse

	{

		dst := &retval.LoginSession
		src := v.LoginSession
		var err error
		*dst, err = __marshalLogInWithEmailLoginSessionIQueryableLoginSession(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal LogInWithEmailResponse.LoginSession: %w", err)
		}
	}
	return &retval, nil
}

// LogInWithUsernameLoginSessionIQueryableLoginSession includes the requested fields of the GraphQL interface IQueryableLoginSession.
//
// LogInWithUsernameLoginSessionIQueryableLoginSession is implemented by the following types:
// LogInWithUsernameLoginSessionQueryableLoginSession
type LogInWithUsernameLoginSessionIQueryableLoginSession interface {
	implementsGraphQLInterfaceLogInWithUsernameLoginSessionIQueryableLoginSession()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetSessionToken returns the interface-field "sessionToken" from its implementation.
	GetSessionToken() LogInWithUsernameLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken
}

func (v *LogInWithUsernameLoginSessionQueryableLoginSession) implementsGraphQLInterfaceLogInWithUsernameLoginSessionIQueryableLoginSession() {
}

func __unmarshalLogInWithUsernameLoginSessionIQueryableLoginSession(b []byte, v *LogInWithUsernameLoginSessionIQueryableLoginSession) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "QueryableLoginSession":
		*v = new(LogInWithUsernameLoginSessionQueryableLoginSession)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing IQueryableLoginSession.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for LogInWithUsernameLoginSessionIQueryableLoginSession: "%v"`, tn.TypeName)
	}
}

func __marshalLogInWithUsernameLoginSessionIQueryableLoginSession(v *LogInWithUsernameLoginSessionIQueryableLoginSession) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *LogInWithUsernameLoginSessionQueryableLoginSession:
		typename = "QueryableLoginSession"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalLogInWithUsernameLoginSessionQueryableLoginSession
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for LogInWithUsernameLoginSessionIQueryableLoginSession: "%T"`, v)
	}
}

// LogInWithUsernameLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken includes the requested fields of the GraphQL interface IQueryableSessionToken.
//
// LogInWithUsernameLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken is implemented by the following types:
// LogInWithUsernameLoginSessionIQueryableLoginSessionSessionTokenQueryableSessionToken
type LogInWithUsernameLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken interface {
	implementsGraphQLInterfaceLogInWithUsernameLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetToken returns the interface-field "token" from its implementation.
	GetToken() string
}

func (v *LogInWithUsernameLoginSessionIQueryableLoginSessionSessionTokenQueryableSessionToken) implementsGraphQLInterfaceLogInWithUsernameLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken() {
}

func __unmarshalLogInWithUsernameLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken(b []byte, v *LogInWithUsernameLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "QueryableSessionToken":
		*v = new(LogInWithUsernameLoginSessionIQueryableLoginSessionSessionTokenQueryableSessionToken)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing IQueryableSessionToken.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for LogInWithUsernameLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken: "%v"`, tn.TypeName)
	}
}

func __marshalLogInWithUsernameLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken(v *LogInWithUsernameLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *LogInWithUsernameLoginSessionIQueryableLoginSessionSessionTokenQueryableSessionToken:
		typename = "QueryableSessionToken"

		result := struct {
			TypeName string `json:"__typename"`
			*LogInWithUsernameLoginSessionIQueryableLoginSessionSessionTokenQueryableSessionToken
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for LogInWithUsernameLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken: "%T"`, v)
	}
}

// LogInWithUsernameLoginSessionIQueryableLoginSessionSessionTokenQueryableSessionToken includes the requested fields of the GraphQL type QueryableSessionToken.
type LogInWithUsernameLoginSessionIQueryableLoginSessionSessionTokenQueryableSessionToken struct {
	Typename string `json:"__typename"`
	Token    string `json:"token"`
}

// GetTypename returns LogInWithUsernameLoginSessionIQueryableLoginSessionSessionTokenQueryableSessionToken.Typename, and is useful for accessing the field via an interface.
func (v *LogInWithUsernameLoginSessionIQueryableLoginSessionSessionTokenQueryableSessionToken) GetTypename() string {
	return v.Typename
}

// GetToken returns LogInWithUsernameLoginSessionIQueryableLoginSessionSessionTokenQueryableSessionToken.Token, and is useful for accessing the field via an interface.
func (v *LogInWithUsernameLoginSessionIQueryableLoginSessionSessionTokenQueryableSessionToken) GetToken() string {
	return v.Token
}

// LogInWithUsernameLoginSessionQueryableLoginSession includes the requested fields of the GraphQL type QueryableLoginSession.
type LogInWithUsernameLoginSessionQueryableLoginSession struct {
	Typename     string                                                                                `json:"__typename"`
	SessionToken LogInWithUsernameLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken `json:"-"`
}

// GetTypename returns LogInWithUsernameLoginSessionQueryableLoginSession.Typename, and is useful for accessing the field via an interface.
func (v *LogInWithUsernameLoginSessionQueryableLoginSession) GetTypename() string { return v.Typename }

// GetSessionToken returns LogInWithUsernameLoginSessionQueryableLoginSession.SessionToken, and is useful for accessing the field via an interface.
func (v *LogInWithUsernameLoginSessionQueryableLoginSession) GetSessionToken() LogInWithUsernameLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken {
	return v.SessionToken
}

func (v *LogInWithUsernameLoginSessionQueryableLoginSession) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*LogInWithUsernameLoginSessionQueryableLoginSession
		SessionToken json.RawMessage `json:"sessionToken"`
		graphql.NoUnmarshalJSON
	}
	firstPass.LogInWithUsernameLoginSessionQueryableLoginSession = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.SessionToken
		src := firstPass.SessionToken
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalLogInWithUsernameLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal LogInWithUsernameLoginSessionQueryableLoginSession.SessionToken: %w", err)
			}
		}
	}
	return nil
}

type __premarshalLogInWithUsernameLoginSessionQueryableLoginSession struct {
	Typename string `json:"__typename"`

	SessionToken json.RawMessage `json:"sessionToken"`
}

func (v *LogInWithUsernameLoginSessionQueryableLoginSession) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *LogInWithUsernameLoginSessionQueryableLoginSession) __premarshalJSON() (*__premarshalLogInWithUsernameLoginSessionQueryableLoginSession, error) {
	var retval __premarshalLogInWithUsernameLoginSessionQueryableLoginSession

	retval.Typename = v.Typename
	{

		dst := &retval.SessionToken
		src := v.SessionToken
		var err error
		*dst, err = __marshalLogInWithUsernameLoginSessionIQueryableLoginSessionSessionTokenIQueryableSessionToken(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal LogInWithUsernameLoginSessionQueryableLoginSession.SessionToken: %w", err)
		}
	}
	return &retval, nil
}

// LogInWithUsernameResponse is returned by LogInWithUsername on success.
type LogInWithUsernameResponse struct {
	LoginSession LogInWithUsernameLoginSessionIQueryableLoginSession `json:"-"`
}

// GetLoginSession returns LogInWithUsernameResponse.LoginSession, and is useful for accessing the field via an interface.
func (v *LogInWithUsernameResponse) GetLoginSession() LogInWithUsernameLoginSessionIQueryableLoginSession {
	return v.LoginSession
}

func (v *LogInWithUsernameResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*LogInWithUsernameResponse
		LoginSession json.RawMessage `json:"loginSession"`
		graphql.NoUnmarshalJSON
	}
	firstPass.LogInWithUsernameResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.LoginSession
		src := firstPass.LoginSession
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalLogInWithUsernameLoginSessionIQueryableLoginSession(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal LogInWithUsernameResponse.LoginSession: %w", err)
			}
		}
	}
	return nil
}

type __premarshalLogInWithUsernameResponse struct {
	LoginSession json.RawMessage `json:"loginSession"`
}

func (v *LogInWithUsernameResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *LogInWithUsernameResponse) __premarshalJSON() (*__premarshalLogInWithUsernameResponse, error) {
	var retval __premarshalLogInWithUsernameResponse

	{

		dst := &retval.LoginSession
		src := v.LoginSession
		var err error
		*dst, err = __marshalLogInWithUsernameLoginSessionIQueryableLoginSession(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal LogInWithUsernameResponse.LoginSession: %w", err)
		}
	}
	return &retval, nil
}

// __CreateLoginInput is used internally by genqlient
type __CreateLoginInput struct {
	Username    string `json:"username"`
	Email       string `json:"email"`
	PhoneNumber string `json:"phoneNumber"`
	Password    string `json:"password"`
}

// GetUsername returns __CreateLoginInput.Username, and is useful for accessing the field via an interface.
func (v *__CreateLoginInput) GetUsername() string { return v.Username }

// GetEmail returns __CreateLoginInput.Email, and is useful for accessing the field via an interface.
func (v *__CreateLoginInput) GetEmail() string { return v.Email }

// GetPhoneNumber returns __CreateLoginInput.PhoneNumber, and is useful for accessing the field via an interface.
func (v *__CreateLoginInput) GetPhoneNumber() string { return v.PhoneNumber }

// GetPassword returns __CreateLoginInput.Password, and is useful for accessing the field via an interface.
func (v *__CreateLoginInput) GetPassword() string { return v.Password }

// __LogInWithEmailInput is used internally by genqlient
type __LogInWithEmailInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// GetEmail returns __LogInWithEmailInput.Email, and is useful for accessing the field via an interface.
func (v *__LogInWithEmailInput) GetEmail() string { return v.Email }

// GetPassword returns __LogInWithEmailInput.Password, and is useful for accessing the field via an interface.
func (v *__LogInWithEmailInput) GetPassword() string { return v.Password }

// __LogInWithUsernameInput is used internally by genqlient
type __LogInWithUsernameInput struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

// GetUsername returns __LogInWithUsernameInput.Username, and is useful for accessing the field via an interface.
func (v *__LogInWithUsernameInput) GetUsername() string { return v.Username }

// GetPassword returns __LogInWithUsernameInput.Password, and is useful for accessing the field via an interface.
func (v *__LogInWithUsernameInput) GetPassword() string { return v.Password }

// The mutation executed by CreateLogin.
const CreateLogin_Operation = `
mutation CreateLogin ($username: String, $email: String, $phoneNumber: String, $password: String!) {
	newLogin: createLogin(username: $username, email: $email, phoneNumber: $phoneNumber, password: $password) {
		__typename
		id
		username
		email {
			__typename
			address
		}
		phoneNumber {
			__typename
			number
		}
	}
}
`

func CreateLogin(
	ctx_ context.Context,
	client_ graphql.Client,
	username string,
	email string,
	phoneNumber string,
	password string,
) (data_ *CreateLoginResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "CreateLogin",
		Query:  CreateLogin_Operation,
		Variables: &__CreateLoginInput{
			Username:    username,
			Email:       email,
			PhoneNumber: phoneNumber,
			Password:    password,
		},
	}

	data_ = &CreateLoginResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by LogInWithEmail.
const LogInWithEmail_Operation = `
mutation LogInWithEmail ($email: String!, $password: String!) {
	loginSession: logInWithPassword(email: $email, password: $password) {
		__typename
		sessionToken {
			__typename
			token
		}
	}
}
`

func LogInWithEmail(
	ctx_ context.Context,
	client_ graphql.Client,
	email string,
	password string,
) (data_ *LogInWithEmailResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "LogInWithEmail",
		Query:  LogInWithEmail_Operation,
		Variables: &__LogInWithEmailInput{
			Email:    email,
			Password: password,
		},
	}

	data_ = &LogInWithEmailResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by LogInWithUsername.
const LogInWithUsername_Operation = `
mutation LogInWithUsername ($username: String!, $password: String!) {
	loginSession: logInWithPassword(username: $username, password: $password) {
		__typename
		sessionToken {
			__typename
			token
		}
	}
}
`

func LogInWithUsername(
	ctx_ context.Context,
	client_ graphql.Client,
	username string,
	password string,
) (data_ *LogInWithUsernameResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "LogInWithUsername",
		Query:  LogInWithUsername_Operation,
		Variables: &__LogInWithUsernameInput{
			Username: username,
			Password: password,
		},
	}

	data_ = &LogInWithUsernameResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
